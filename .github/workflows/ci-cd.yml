name: DevBlog CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.11"

jobs:
  # ================================
  # JOB 1: TESTING UNITARIO
  # ================================
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unit tests with coverage
        run: |
          pytest tests/test_api.py tests/test_routes.py --cov=app --cov-report=xml --cov-report=term-missing -v

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage.xml
          retention-days: 30

  # ================================
  # JOB 2: E2E TESTING (DESHABILITADO TEMPORALMENTE)
  # ================================
  e2e-tests:
    name: E2E Tests with Selenium
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Chrome browser
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run E2E tests
        run: |
          pytest tests/test_e2e_basic.py -v --tb=short
        env:
          DISPLAY: :99

      - name: Upload E2E screenshots on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-screenshots
          path: "*.png"
          retention-days: 7

  # ================================
  # JOB 3: DOCKER BUILD
  # ================================
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, e2e-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t devblog:${{ github.sha }} .
          docker build -t devblog:latest .

      - name: Test Docker image
        run: |
          docker run -d -p 5000:5000 --name test-container devblog:latest
          sleep 15
          curl -f http://localhost:5000/ || exit 1
          curl -f http://localhost:5000/api/health || exit 1
          docker stop test-container
          docker rm test-container
          echo " Docker image works correctly!"

  # ================================
  # JOB 4: SECURITY SCAN
  # ================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          pip install safety bandit

      - name: Run safety check
        run: |
          safety check -r requirements.txt --json --output safety-report.json || true
          echo " Safety check completed"

      - name: Run bandit security linter
        run: |
          bandit -r app/ -f json -o bandit-report.json || true
          echo " Bandit scan completed"

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json
          retention-days: 30

  # ================================
  # JOB 5: DEPLOY
  # ================================
  deploy:
    name: Deploy Notification
    runs-on: ubuntu-latest
    needs: [test, e2e-tests, docker-build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Deployment Success
        run: |
          echo " All checks passed successfully!"
          echo " Unit Tests:  Passed"
          echo " E2E Tests:  Passed"
          echo " Docker:  Built and tested"
          echo " Security:  Scanned"
          echo " Ready for production deployment!"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref }}"
